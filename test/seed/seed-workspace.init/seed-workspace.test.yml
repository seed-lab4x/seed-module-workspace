# code: language=ansible
---

- name: seed-workspace.test|fact param
  vars:
    workspace_optional:
      package:
        - sshpass
        - rsync
        - git
        - zip
      pip:
        - stormssh
        - jsondiff
        - jmespath
        - pyyaml
        - lxml
        - requests
      requirements: "{{ inventory_dir }}/../requirements.yml"
      role: []
      collection:
        - community.docker
        - community.general
    workspace_param: "{{ workspace_optional | combine(workspace | default({},true), recursive=True) }}"
  run_once: true
  ansible.builtin.set_fact:
    _ws: "{{ workspace_param }}"

- name: seed-workspace.test|install system package
  become: true
  loop: "{{ _ws.package }}"
  ansible.builtin.package:
    name: "{{ item }}"
    state: present
  register: package_install
  until: package_install is succeeded

- name: seed-workspace.test|install python pip
  loop: "{{ _ws.pip }}"
  ansible.builtin.pip:
    name: "{{ item }}"
    state: latest
  register: pip_install
  until: pip_install is succeeded

- name: seed-workspace.test|stat ansible requirements
  ansible.builtin.stat:
    path: "{{ _ws.requirements }}"
  register: stat_requirements

- name: seed-workspace.test|install ansible requirements
  when: stat_requirements.stat.exists
  community.general.ansible_galaxy_install:
    type: both
    requirements_file: "{{ stat_requirements.stat.path }}"
  register: requirements_install
  until: requirements_install is succeeded

- name: seed-workspace.test|install ansible loop
  when: not stat_requirements.stat.exists
  vars:
    values_role: "{{ ['role'] | product(_ws.role) }}"
    values_collection: "{{ ['collection'] | product(_ws.collection) }}"
    values_all: "{{ values_role + values_collection }}"
    item_param: "{{ dict(['type', 'name'] | zip(item)) }}"
  loop: "{{ values_all }}"
  community.general.ansible_galaxy_install:
    type: "{{ item_param.type }}"
    name: "{{ item_param.name }}"
  register: galaxy_install
  until: galaxy_install is succeeded

- name: seed-workspace.test|unfact param
  run_once: true
  ansible.builtin.set_fact:
    _ws: !!null
